{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vaultSku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "SKU for the vault"
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the vault is enabled for VM or Service Fabric deployment"
            }
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Specifies if the vault is enabled for ARM template deployment"
            }
        },
        "enableVaultForVolumeEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specifies if the vault is enabled for volume encryption"
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "d",
            "metadata": {
                "description": "Development environment"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location matches resource group"
            }
        },
        "dataProduct": {
            "type": "string",
            "metadata": {
                "description": "Use Case name"
            }
        },
        "userObjectId": {
            "defaultValue": [
                {
                    "Id": "0789cf13-eb1c-4b52-8e7e-6b3e15ef18f1", //George
                    "Permissions": {
                        "keys": [ "all" ],
                        "secrets": [ "all" ],
                        "certificates": [ "all" ]
                    }
                },
                {
                    "Id": "6daf350c-1cbe-4feb-91ed-5ce7799fcb60", //Giang
                    "Permissions": {
                        "keys": [ "all" ],
                        "secrets": [ "all" ],
                        "certificates": [ "all" ]
                    }
                }
            ],
            "type": "Array",
            "metadata": {
                "description": "User principals Objects with permissions."
            }
        },
        "keyVaultBehindVNet": {
            "type": "bool",
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Determines whether or not to put the key vault behind VNet"
            }
        },
        "resourceTags": {
            "type": "object"
        },
        "countryCode": {
            "type": "string",
            "defaultValue": "cs",
            "metadata": {
                "description": "country code"
            }
        }
    },
    "variables": {
        "adbBeSnetName": "[concat(parameters('dataProduct'),'-be-',parameters('environment'),'-dbr','-snet')]",
        "adbFeSnetName": "[concat(parameters('dataProduct'),'-fe-',parameters('environment'),'-dbr','-snet')]",
        "computeSnetName": "[concat(parameters('dataProduct'),'-compute-',parameters('environment'),'-snet')]",
        "vnetName": "[concat(parameters('dataProduct'),'-',parameters('environment'),'-vnet')]",
        "keyVaultName": "[toLower(concat(parameters('countryCode'),'-dp-',parameters('dataProduct'),'-',parameters('environment'),'-kv'))]",
        "computeSubnet": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('computeSnetName'))]",
        "adbFeSubnet": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('adbFeSnetName'))]",
        "adbBeSubnet": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('adbBeSnetName'))]",
        "privateEndpointName": "[concat(parameters('dataProduct'),'-',parameters('environment'),'-', variables('keyVaultName'),'-pe')]",
        "networkRuleSetBehindVNet": {
            "defaultAction": "deny",
            "virtualNetworkRules": [
                {
                    "action": "Allow",
                    "id": "[variables('computeSubnet')]"
                },
                {
                    "action": "Allow",
                    "id": "[variables('adbFeSubnet')]"
                },
                {
                    "action": "Allow",
                    "id": "[variables('adbBeSubnet')]"
                }
            ]
        },
        "networkRuleSetDefault": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
        }
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "apiVersion": "2021-04-01-preview",
            "tags": "[parameters('resourceTags')]",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enabledForVolumeEncryption": "[parameters('enableVaultForVolumeEncryption')]",
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]",
                "copy": [
                    {
                        "name": "accessPolicies",
                        "count": "[length(parameters('userObjectId'))]",
                        "input": {
                            "tenantId": "[subscription().tenantId]",
                            "objectId": "[parameters('userObjectId')[copyIndex('accessPolicies')].Id]",
                            "permissions": "[parameters('userObjectId')[copyIndex('accessPolicies')].Permissions]"
                        }
                    }
                ],
                "sku": {
                    "name": "[parameters('vaultSku')]",
                    "family": "A"
                },
                "networkAcls": "[if(parameters('keyVaultBehindVNet'), variables('networkRuleSetBehindVNet'), variables('networkRuleSetDefault'))]"
            }
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateEndpointName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('keyVaultName'))]"
            ],
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('computeSnetName'))]"
              },
              "privateLinkServiceConnections": [
                {
                  "name": "[variables('privateEndpointName')]",
                  "properties": {
                    "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('keyVaultName'))]",
                    "groupIds": [
                      "vault"
                   ]
                  }
                }
              ]
            }
          }
    ],
    "outputs": {
        "akvUrl": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults',variables('keyVaultName'))).vaultUri]"
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        }
    }
}
